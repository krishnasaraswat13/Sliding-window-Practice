//TLE
class Solution {
    public String minWindow(String s, String t) {
        int n=s.length();
        int m=t.length();
        int st=-1;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            int cnt=0;
            HashMap<Character,Integer> map=new HashMap<>();
            for(int j=0;j<m;j++){
                map.put(t.charAt(j),map.getOrDefault(t.charAt(j),0)+1);
            }
            for(int j=i;j<n;j++){
                if(map.getOrDefault(s.charAt(j),0)>0) cnt++;
                map.put(s.charAt(j),map.getOrDefault(s.charAt(j),0)-1);
                if(cnt==m){
                    if(j-i+1<min){
                    min=Math.min(min,j-i+1);
                    st=i;
                }
                }
            }
        }
        if (min!=Integer.MAX_VALUE){
        return s.substring(st,st+min);
        }return "";
    }
}

//optimal
class Solution {
    public String minWindow(String s, String t) {
        HashMap<Character,Integer> map=new HashMap<>();
        int n=s.length();
        int m=t.length();
        int i=0;
        int j=0;
        for(int p=0;p<m;p++){
            map.put(t.charAt(p),map.getOrDefault(t.charAt(p),0)+1);
        }
        int min=Integer.MAX_VALUE;
        int st=-1;
        int cnt=0;
        while(j<n){
            if(map.getOrDefault(s.charAt(j),0)>0){
                cnt++;
               
            }
             map.put(s.charAt(j),map.getOrDefault(s.charAt(j),0)-1);
            while(cnt==m){
                if(j-i+1<min) st=i;
                min=Math.min(min,j-i+1);
                    
                map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
                if(map.getOrDefault(s.charAt(i),0)>0){
                    cnt--;
                }
                i++;
            }
            j++;
        }
        if(min!=Integer.MAX_VALUE){
            return s.substring(st,st+min);
        }
        return "";  

    }
}

//gfg variety
class Solution {
    public String minWindow(String s1, String s2) {
        // code here
        int n1 = s1.length();
        int n2 = s2.length();
        int s1_ptr = 0;
        int s2_ptr = 0;
        int minLength = Integer.MAX_VALUE;
        String result = "";
        while (s1_ptr < n1) {
            if (s1.charAt(s1_ptr) == s2.charAt(s2_ptr)) {
                s2_ptr++;
            }
            if (s2_ptr == n2) {
                int end = s1_ptr;
                int s2_back_ptr = n2 - 1;
                int start = end;

                while (s2_back_ptr >= 0) {
                    if (s1.charAt(start) == s2.charAt(s2_back_ptr)) {
                        s2_back_ptr--;
                    }
                    start--;
                }
               
                start++;
                if (end - start + 1 < minLength) {
                    minLength = end - start + 1;
                    result = s1.substring(start, end + 1);
                }
                s1_ptr = start;
                s2_ptr = 0;
            }

            s1_ptr++;
        }

        return result;
    }
}
